<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux运维 on DEVIN&#39;s BLOG</title>
    <link>https://devin0x01.github.io/tags/linux%E8%BF%90%E7%BB%B4/</link>
    <description>Recent content in Linux运维 on DEVIN&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Jul 2023 12:10:05 +0800</lastBuildDate><atom:link href="https://devin0x01.github.io/tags/linux%E8%BF%90%E7%BB%B4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WireGuard配置教程.md</title>
      <link>https://devin0x01.github.io/post/linux%E8%BF%90%E7%BB%B4/wireguard%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 30 Jul 2023 12:10:05 +0800</pubDate>
      
      <guid>https://devin0x01.github.io/post/linux%E8%BF%90%E7%BB%B4/wireguard%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</guid>
      <description>Run WireGuard VPN Server in Docker Container with Docker Compose - TechViewLeo &amp;ndash; 主要参考这个
基于Wireguard技术的虚拟个人网络搭建: 基于wireguard的内网穿透技术~
搭建WireGuard-腾讯云开发者社区-腾讯云
公网机器: IP=100.101.102.103, Name=TencentVM1 私网机器: IP=192.168.123.189, Name=LocalMint1 1.公网配置 1.1.安装Docke和docker-compose Docker Compose | 菜鸟教程
# 安装docker-compose sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/v2.19.1/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose sudo chmod 755 /usr/local/bin/docker-compose docker-compose version 1.2.安装linuxserver/wireguard镜像 sudo mkdir /opt/wireguard-server vim docker-compose.yaml # yaml里需要配置容器的名字，server的地址 docker compose up -d # 检查WireGuard服务器的状态 docker exec -it wireguard wg docker exec -it wireguard /bin/bash # 其他docker compose命令 docker compose start wireguard docker compose restart wireguard docker compose ps 配置文件的目录结构</description>
    </item>
    
    <item>
      <title>Docker内显示图形界面</title>
      <link>https://devin0x01.github.io/post/linux%E8%BF%90%E7%BB%B4/docker%E5%86%85%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Fri, 28 Jul 2023 16:05:25 +0800</pubDate>
      
      <guid>https://devin0x01.github.io/post/linux%E8%BF%90%E7%BB%B4/docker%E5%86%85%E6%98%BE%E7%A4%BA%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2/</guid>
      <description>关于X11 x(7) - Linux man page
Cygwin系列（十二）：了解X - 知乎
X11采用了C/S的架构，在其设计下，整个图形视窗系统主要分为3个部分：
1.X Server（X服务器）。X Server一方面负责和设备驱动交互，监听显示器和键盘鼠标，另一方面响应X Client需求传递键盘、鼠标事件、（通过设备驱动）绘制图形文字等。反直觉之一，X Server运行在本地。
2.X Client（X客户端）。X Client也叫X应用程序，负责实现程序逻辑，在收到设备事件后计算出绘图数据，由于本身没有绘制能力，只能向X Server发送绘制请求和绘图数据，告诉X Server在哪里绘制一个什么样的图形。X Client可以和X Server在同一个主机上，也可以通过TCP/IP网络连接。
3.Window Manager（窗口管理器，简称WM），或者叫合成器（Compositor）。多个X Client向X Server发送绘制请求时，各X Client程序并不知道彼此的存在，绘制图形出现重叠、颜色干扰等问题是大概率事件，这就需要一个管理者统一协调，即Window Manager，它掌管各X Client的Window（窗口）视觉外观，如形状、排列、移动、重叠渲染等。反直觉之二，Window Manager并非X Server的一部分，而是一个特殊的X Client程序。
3个部分， X Server是整个X Window System的中心，协调X客户端和窗口管理器的通信。
常用命令 xorg - What does $DISPLAY environment variable mean - Ask Ubuntu
x11 forwarding - How to fix &amp;ldquo;MobaXterm X11 proxy: Unsupported authorisation protocol&amp;rdquo; - Super User
echo $DISPLAY # 注意：`xauth add` 之后可能需要重新连接才能生效!! xauth add $DISPLAY .</description>
    </item>
    
    <item>
      <title>Docker常用命令</title>
      <link>https://devin0x01.github.io/post/linux%E8%BF%90%E7%BB%B4/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 28 Jul 2023 16:05:25 +0800</pubDate>
      
      <guid>https://devin0x01.github.io/post/linux%E8%BF%90%E7%BB%B4/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>docker docker info #docker配置信息 docker inspect $cid #查看容器的配置信息 docker images docker ps -a docker run -it $image_id --rm #rm表示退出容器后就删除该容器 docker exec -it $cid /bin/bash docker start $cid docker stop $cid docker restart $cid docker rm -f $cid docker logs $cid #查看容器日志 docker system df #查看docker缓存大小 docker builder prune #一键清理 Build Cache docker builder prune --filter &amp;#39;until=240h&amp;#39; #保留最近10天的缓存 docker tag ca1b6b825289 devincpp/rk3568:v1.0 #重命名镜像 docker commit -a &amp;#34;author&amp;#34; -m &amp;#34;description&amp;#34; a404c6c174a2 devincpp/mysql:v1 #-p表示在提交时暂停容器 docker compose docker compose build | Docker Documentation</description>
    </item>
    
  </channel>
</rss>
