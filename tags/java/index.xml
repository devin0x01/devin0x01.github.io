<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on DEVIN&#39;s BLOG</title>
    <link>https://devin0x01.github.io/tags/java/</link>
    <description>Recent content in Java on DEVIN&#39;s BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Jun 2023 14:05:25 +0800</lastBuildDate>
    <atom:link href="https://devin0x01.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java基础</title>
      <link>https://devin0x01.github.io/post/java/java%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sun, 18 Jun 2023 14:05:25 +0800</pubDate>
      <guid>https://devin0x01.github.io/post/java/java%E5%9F%BA%E7%A1%80/</guid>
      <description>数据类型 INFINITY和NaN // INFINITY定义 public static final double POSITIVE_INFINITY = 1.0 / 0.0; public static final double NEGATIVE_INFINITY = -1.0 / 0.0; public static final float POSITIVE_INFINITY = 1.0f / 0.0f; public static final float NEGATIVE_INFINITY = -1.0f / 0.0f; // 无穷大*0=NAN System.out.println(Float.POSITIVE_INFINITY * 0); // output: NAN // 无穷大 System.out.println((Float.POSITIVE_INFINITY / 0) == Float.POSITIVE_INFINITY); // output: true System.out.println(Float.POSITIVE_INFINITY == (Float.POSITIVE_INFINITY + 10000)); // output: true System.out.println(Float.POSITIVE_INFINITY == (Float.POSITIVE_INFINITY / 10000)); // output: true // 判断是否为INFINITY System.</description>
    </item>
    <item>
      <title>字符集与编码</title>
      <link>https://devin0x01.github.io/post/java/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81/</link>
      <pubDate>Sun, 18 Jun 2023 14:05:25 +0800</pubDate>
      <guid>https://devin0x01.github.io/post/java/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E7%BC%96%E7%A0%81/</guid>
      <description>术语 字符(character)是具有语义值的文本的最小单位。 字符集(character set)是可能由多种语言使用的字符的集合。例：拉丁语字符集由英语和大多数欧洲语言使用，但希腊语字符集仅由希腊语使用。 编码字符集(coded character set)是一个字符集，其中每个字符对应于一个唯一的数字。 一个编码字符集的编码点(code point)是字符集中或编码空间中允许的任何值。 编码空间(code space)是一个整数范围，其值为编码点。 编码单元(code unit)是一个位序列，用于在给定的编码表单中对库的每个字符进行编码。有的文档中称之为编码值(code value)。
编码单元例子：US-ASCII: 7 bits，UTF-8, GB18030: 8 bits，UTF-16: 16 bits，UTF-32: 32 bits
字符串&amp;quot;abc𐐀&amp;quot; 包括4个字符，4个编码点： (1) UTF-32编码时: 4个编码单元，00000061, 00000062, 00000063, 00010400 (2) UTF-16编码时: 5个编码单元，0061, 0062, 0063, d801, dc00 (3) UTF-8编码时: 7个编码单元，61, 62, 63, f0, 90, 90, 80
编码格式区别 Unicode、GB2312都是编码字符集，即一个编号（数字）到字符的一种映射关系，仅仅是一种映射关系。
GBK、UTF-8都是编码格式。GBK和UTF-8都是用来序列化或存储Unicode编码的数据的，但是分别是2种不同的格式。除了格式不一样之外，他们所关心的unicode编码范围也不一样，UTF-8考虑了很多种不同国家的字符，涵盖整个Unicode码表，所以其存储一个字符的编码的时候，使用的字节长度也从1字节到4字节不等；而GBK只考虑中文(在Unicode中的一小部分字符的编码），所以它算好了只要2个字节就能涵盖到绝大多数常用中文(2个字节能表示6w多种字符)，所以它存储一个字符的时候，所用的字节长度是固定的。
Java中的编码 首先Java的String使用的编码是Unicode，但是当String存在于内存中时(也就是当程序运行时，你在代码中用String类型的引用对它进行操作时，也就是String没有被存在文件中且也没有在网络中传输(序列化)时)，是“只有编码而没有编码格式的”，所以Java程序中的任何String对象，说它是GBK还是UTF-8都是错的。GBK和UTF-8是编码格式而不是编码，String在内存中不需要“编码格式”(记住编码格式是在存文件或序列化的时候使用的), 它只是一个Unicode的字符串而已。
所以Java里面String是不带编码格式的，而String.toByteArray(String charsetName)得到的byteArray是带编码格式的，格式就是你传入的charsetName，我们不妨把toByteArray的这个过程叫做==编码==；另外，new String(byte bytes[], String charsetName)是把一个byte数组(带编码格式)以charsetName指定的编码格式翻译为一个不带编码格式的String对象，我们不妨把这个过程叫==解码==。
String(byte[] bytes)通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。 String(byte[] bytes, Charset charset)通过使用指定的 charset 解码指定的 byte 数组，构造一个新的 String。</description>
    </item>
  </channel>
</rss>
